--- #################### 注册中心 + 配置中心相关配置 ####################
spring:
  cloud:
    nacos:
      # Nacos 服务器地址
      server-addr: 10.0.3.161:8848
      username: dev # Nacos 账号
      password: 123456 # Nacos 密码
      # 【配置中心】配置项
      discovery:
        # 命名空间。这里使用 dev 开发环境
        namespace: drm-local
        # 使用的 Nacos 配置分组，默认为 DEFAULT_GROUP
        group: DEFAULT_GROUP
        metadata:
          # 服务实例的版本号，可用于灰度发布
          version: 1.0.0
      # 【注册中心】配置项
      config:
        # 命名空间。这里使用 dev 开发环境
        namespace: drm-local
        # 使用的 Nacos 配置分组，默认为 DEFAULT_GROUP
        group: DEFAULT_GROUP


--- #################### 数据库相关配置 ####################
spring:
  # 数据源配置项
  autoconfigure:
    exclude:
      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源
  datasource:
    # Druid 【监控】相关的全局配置
    druid:
      web-stat-filter:
        enabled: true
      stat-view-servlet:
        enabled: true
        # 设置白名单，不填则允许所有访问
        allow:
        url-pattern: /druid/*
        # 控制台管理用户名和密码
        login-username: admin
        login-password: 123456
      filter:
        stat:
          enabled: true
          # 开启慢 SQL 记录
          log-slow-sql: true
          slow-sql-millis: 100
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
    dynamic:
      # Druid 【连接池】相关的全局配置
      druid:
        # 初始连接数
        initial-size: 1
        # 最小连接池数量
        min-idle: 1
        # 最大连接池数量
        max-active: 20
        # 配置获取连接等待超时的时间，单位：毫秒
        max-wait: 600000
        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒
        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒
        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒
        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
      primary: master
      datasource:
        master:
          url: jdbc:mysql://127.0.0.1:3306/drm_map_free?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例
          username: root
          password: root

  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优
  redis:
    host: 127.0.0.1
    port: 6379
    database: 0
    #password:

--- #################### MQ 消息队列相关配置 ####################

# rocketmq 配置项，对应 RocketMQProperties 配置类
rocketmq:
  name-server: 10.0.3.165:9876 # RocketMQ Namesrv
  producer:
    # 生产者分组
    group: dmap_producer_group
    mark-scan-topic: dmap_mark_scan_topic_${spring.profiles.active}
    # 发送消息超时时间，单位：毫秒。默认为 3000 。
    send-message-timeout: 3000
    # 消息压缩阀值，当消息体的大小超过该阀值后，进行消息压缩。默认为 4 * 1024B
    compress-message-body-threshold: 4096
    # 消息体的最大允许大小。。默认为 4 * 1024 * 1024B
    max-message-size: 4194304
    # 同步发送消息时，失败重试次数。默认为 2 次。
    retry-times-when-send-failed: 2
    # 异步发送消息时，失败重试次数。默认为 2 次。
    retry-times-when-send-async-failed: 2
    # 发送消息给 Broker 时，如果发送失败，是否重试另外一台 Broker 。默认为 false
    retry-next-server: false
    # 可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/acl/user_guide.md 文档
    #access-key: # Access Key
    #secret-key: # Secret Key
    # 是否开启消息轨迹功能。默认为 true 开启。可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/msg_trace/user_guide.md 文档
    enable-msg-trace: true
    # 自定义消息轨迹的 Topic 。默认为 RMQ_SYS_TRACE_TOPIC 。
    customized-trace-topic: RMQ_SYS_TRACE_TOPIC
  #Consumer 配置项
  consumer:
    group: dmap_mark_group_${spring.profiles.active}
    # 最大重试次数，默认为 16
    max-reconsume-times: 16
    mark-scan-topic: dmap_mark_scan_topic_${spring.profiles.active}
    # 默认 5000 毫秒
    pullInterval: 3000
#    # 配置某个消费分组，是否监听指定 Topic 。结构为 Map<消费者分组, <Topic, Boolean>> 。默认情况下，不配置表示监听。
#    listeners:
#      test-consumer-group:
#        # 关闭 test-consumer-group 对 topic1 的监听消费
#        topic1: false

--- #################### 定时任务相关配置 ####################

# Quartz 配置项，对应 QuartzProperties 配置类
spring:
  quartz:
    # Job 存储器类型。默认为 memory 表示内存，可选 jdbc 使用数据库。
    job-store-type: jdbc
    # 是否自动启动计划程序，本地开发环境，尽量不要开启 Job
    auto-startup: true
    scheduler-name: schedulerName # Scheduler 名字。默认为 schedulerName
    # 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true
    wait-for-jobs-to-complete-on-shutdown: true
    properties: # 添加 Quartz Scheduler 附加属性，更多可以看 http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/configuration.html 文档
      org:
        quartz:
          # Scheduler 相关配置
          scheduler:
            # 调度器实例名称
            instanceName: schedulerName
            # 分布式节点ID自动生成
            instanceId: AUTO
          # JobStore 相关配置
          jobStore:
            # JobStore 实现类。可见博客：https://blog.csdn.net/weixin_42458219/article/details/122247162
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
            #数据库代理类，一般org.quartz.impl.jdbcjobstore.StdJDBCDelegate可以满足大部分数据库
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            # 表前缀
            tablePrefix: QRTZ_
            # 是否开启集群
            isClustered: true
            # 集群分布式节点有效性检查时间间隔（毫秒），默认为 15000，即 15 秒
            clusterCheckinInterval: 15000
            # misfire 阀值，单位：毫秒。
            misfireThreshold: 60000
          # 线程池相关配置
          threadPool:
            # 线程池类型
            class: org.quartz.simpl.SimpleThreadPool
            # 线程池大小。默认为 10 。
            threadCount: 25
            # 线程优先级
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
    jdbc: # 使用 JDBC 的 JobStore 的时候，JDBC 的配置
      # 是否自动使用 SQL 初始化 Quartz 表结构。这里设置成 never ，我们手动创建表结构。
      # 数据库架构初始化模式（never：从不进行初始化；always：每次都清空数据库进行初始化；embedded：只初始化内存数据库（默认值）
      initialize-schema: NEVER


--- #################### 服务保障相关配置 ####################

# Lock4j 配置项
lock4j:
  # 获取分布式锁超时时间，默认为 3000 毫秒
  acquire-timeout: 3000
  # 分布式锁的超时时间，默认为 30 毫秒
  expire: 30000

--- #################### 监控相关配置 ####################

# 日志文件配置
logging:
  level:
    # 配置自己写的 MyBatis Mapper 打印日志
    com.shulian.safe.drm.module.dmap.mapper: debug
    # TODO 先禁用，Spring Boot 3.X 存在部分错误的 WARN 提示
    org.springframework.context.support.PostProcessorRegistrationDelegate: ERROR

--- #################### 系统相关配置 ####################

# 系统配置项，设置当前项目所有自定义的配置
drm:
  security:
    mock-enable: true
  # 访问日志的配置项
  access-log:
    #访问日志需要 system 模块记录，本地开发环境，可关闭访问日志
    enable: true